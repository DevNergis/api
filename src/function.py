from datetime import *
from yt_dlp import YoutubeDL
from io import BytesIO
import dotenv, requests

FILE_PATH = dotenv.get_key(".env", "FILE_PATH")
OPEN_NEIS_API_KEY = dotenv.get_key(".env", "OPEN_NEIS_API_KEY")
YDL_OPTIONS = dotenv.get_key(".env", "YDL_OPTIONS")
HEADERS = dotenv.get_key(".env", "HEADERS")
SERVER_URL = dotenv.get_key(".env", "SERVER_URL")
DATE = datetime.now().strftime('%Y%m%d')
DATE_QLOAT = datetime.now()
QLOAT_PASSWORD = "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"
FILE_PATH_QLOAT = dotenv.get_key(".env", "FILE_PATH_QLOAT")

def YDL_URL(url: str):
    with YoutubeDL(YDL_OPTIONS) as ydl:
        info = ydl.extract_info(url, download=False)

    URL = info['formats'][0]['url']
    return URL

def YDL_cache(URL: str, NAME: str):
    with requests.get(URL, stream=True, headers=HEADERS) as file_request:
        content = BytesIO()
        
        for chunk in file_request.iter_content(chunk_size=1*1024*1024):
            content.write(chunk)

        with open(f"{NAME}", "wb") as file_save:
            file_save.write(content.getbuffer())
        
        content.seek(0)

    return URL, NAME
